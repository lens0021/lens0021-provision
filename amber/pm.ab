import {
    array_contains,
} from "std/array"
import {
    dir_create,
    dir_exists,
    file_chmod,
    file_exists,
    file_write,
    symlink_create,
} from "std/fs"
import {
    split,
    replace,
    rpad,
} from "std/text"

const user_home = trust $ sudo -u#1000 bash -c 'echo \$HOME' $

fun get_installed_version(pkg) {
    const info = $ rpm --json -qi {pkg} $?
    const version = $ echo "\${nameof info}" | jq -r .Version $?
    const release = $ echo "\${nameof info}" | jq -r .Release $?
    return "{version}-{release}"
}

#[allow_absurd_cast]
fun pm_list() {
    const pkgs = split($ jq -r '.rpm | keys | .[]' ~/.config/declair/config.json $?, "\n")
    const longest_pkg_col = $ jq -r '.rpm | keys | .[]' ~/.config/declair/config.json | wc -L $? as Num
    const longest_ver_col = $ jq -r '.rpm | values | .[]' ~/.config/declair/config.json | wc -L $? as Num
    let longest_installed_ver_col = 0
    for pkg in pkgs {
        let desired = $ jq -r ".rpm[\\\"{pkg}\\\"]" ~/.config/declair/config.json $?
        let state = "Unknown"
        let installed = "-"
        silent $ rpm -q {pkg} $ failed {
            state = "Not Installed"
        }
        if status == 0 {
            installed = get_installed_version(pkg)?
            if len(installed) > longest_installed_ver_col {
                longest_installed_ver_col = len(installed)
            }
            if installed == desired {
                state = "OK"
            } else {
                state = "Version Mismatched"
            }
        }
        // TODO: Colorize
        echo rpad(pkg, " ", longest_pkg_col + 2) + rpad(desired, " ", longest_ver_col+2) + rpad(installed, " ", longest_installed_ver_col + 2) + state
    }
}

fun pm_ensure(pkg: Text): Null?  {
    $ sudo dnf install -y {pkg} $ failed {
        return null
    }
    const installed = get_installed_version(pkg)?
    const updated_json = $ jq ".rpm[\\\"{pkg}\\\"] = \\\"{installed}\\\"" ~/.config/declair/config.json $ failed {
        echo "Failed to update declair config file."
        return null
    }
    file_write("{user_home}/.config/declair/config.json", updated_json) failed {
        echo "Failed to update declair config file."
        return null
    }
}

main(args) {
    if args[1] == "list" {
        pm_list()?
    }

    if args[1] == "ensure" {
        if len(args) >= 2 {
            pm_ensure(args[2])?
        } else {
            echo "No package given"
        }
    }
}
